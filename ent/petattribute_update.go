// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sample/ent/pet"
	"sample/ent/petattribute"
	"sample/ent/predicate"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// PetAttributeUpdate is the builder for updating PetAttribute entities.
type PetAttributeUpdate struct {
	config
	hooks    []Hook
	mutation *PetAttributeMutation
}

// Where adds a new predicate for the PetAttributeUpdate builder.
func (pau *PetAttributeUpdate) Where(ps ...predicate.PetAttribute) *PetAttributeUpdate {
	pau.mutation.predicates = append(pau.mutation.predicates, ps...)
	return pau
}

// SetName sets the "name" field.
func (pau *PetAttributeUpdate) SetName(s string) *PetAttributeUpdate {
	pau.mutation.SetName(s)
	return pau
}

// SetUpdatedAt sets the "updated_at" field.
func (pau *PetAttributeUpdate) SetUpdatedAt(t time.Time) *PetAttributeUpdate {
	pau.mutation.SetUpdatedAt(t)
	return pau
}

// SetCreatedAt sets the "created_at" field.
func (pau *PetAttributeUpdate) SetCreatedAt(t time.Time) *PetAttributeUpdate {
	pau.mutation.SetCreatedAt(t)
	return pau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pau *PetAttributeUpdate) SetNillableCreatedAt(t *time.Time) *PetAttributeUpdate {
	if t != nil {
		pau.SetCreatedAt(*t)
	}
	return pau
}

// SetPetID sets the "pet" edge to the Pet entity by ID.
func (pau *PetAttributeUpdate) SetPetID(id int) *PetAttributeUpdate {
	pau.mutation.SetPetID(id)
	return pau
}

// SetNillablePetID sets the "pet" edge to the Pet entity by ID if the given value is not nil.
func (pau *PetAttributeUpdate) SetNillablePetID(id *int) *PetAttributeUpdate {
	if id != nil {
		pau = pau.SetPetID(*id)
	}
	return pau
}

// SetPet sets the "pet" edge to the Pet entity.
func (pau *PetAttributeUpdate) SetPet(p *Pet) *PetAttributeUpdate {
	return pau.SetPetID(p.ID)
}

// Mutation returns the PetAttributeMutation object of the builder.
func (pau *PetAttributeUpdate) Mutation() *PetAttributeMutation {
	return pau.mutation
}

// ClearPet clears the "pet" edge to the Pet entity.
func (pau *PetAttributeUpdate) ClearPet() *PetAttributeUpdate {
	pau.mutation.ClearPet()
	return pau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PetAttributeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pau.hooks) == 0 {
		affected, err = pau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PetAttributeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pau.mutation = mutation
			affected, err = pau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pau.hooks) - 1; i >= 0; i-- {
			mut = pau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PetAttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PetAttributeUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PetAttributeUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pau *PetAttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   petattribute.Table,
			Columns: petattribute.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: petattribute.FieldID,
			},
		},
	}
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: petattribute.FieldName,
		})
	}
	if value, ok := pau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: petattribute.FieldUpdatedAt,
		})
	}
	if value, ok := pau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: petattribute.FieldCreatedAt,
		})
	}
	if pau.mutation.PetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petattribute.PetTable,
			Columns: []string{petattribute.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pau.mutation.PetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petattribute.PetTable,
			Columns: []string{petattribute.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{petattribute.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PetAttributeUpdateOne is the builder for updating a single PetAttribute entity.
type PetAttributeUpdateOne struct {
	config
	hooks    []Hook
	mutation *PetAttributeMutation
}

// SetName sets the "name" field.
func (pauo *PetAttributeUpdateOne) SetName(s string) *PetAttributeUpdateOne {
	pauo.mutation.SetName(s)
	return pauo
}

// SetUpdatedAt sets the "updated_at" field.
func (pauo *PetAttributeUpdateOne) SetUpdatedAt(t time.Time) *PetAttributeUpdateOne {
	pauo.mutation.SetUpdatedAt(t)
	return pauo
}

// SetCreatedAt sets the "created_at" field.
func (pauo *PetAttributeUpdateOne) SetCreatedAt(t time.Time) *PetAttributeUpdateOne {
	pauo.mutation.SetCreatedAt(t)
	return pauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pauo *PetAttributeUpdateOne) SetNillableCreatedAt(t *time.Time) *PetAttributeUpdateOne {
	if t != nil {
		pauo.SetCreatedAt(*t)
	}
	return pauo
}

// SetPetID sets the "pet" edge to the Pet entity by ID.
func (pauo *PetAttributeUpdateOne) SetPetID(id int) *PetAttributeUpdateOne {
	pauo.mutation.SetPetID(id)
	return pauo
}

// SetNillablePetID sets the "pet" edge to the Pet entity by ID if the given value is not nil.
func (pauo *PetAttributeUpdateOne) SetNillablePetID(id *int) *PetAttributeUpdateOne {
	if id != nil {
		pauo = pauo.SetPetID(*id)
	}
	return pauo
}

// SetPet sets the "pet" edge to the Pet entity.
func (pauo *PetAttributeUpdateOne) SetPet(p *Pet) *PetAttributeUpdateOne {
	return pauo.SetPetID(p.ID)
}

// Mutation returns the PetAttributeMutation object of the builder.
func (pauo *PetAttributeUpdateOne) Mutation() *PetAttributeMutation {
	return pauo.mutation
}

// ClearPet clears the "pet" edge to the Pet entity.
func (pauo *PetAttributeUpdateOne) ClearPet() *PetAttributeUpdateOne {
	pauo.mutation.ClearPet()
	return pauo
}

// Save executes the query and returns the updated PetAttribute entity.
func (pauo *PetAttributeUpdateOne) Save(ctx context.Context) (*PetAttribute, error) {
	var (
		err  error
		node *PetAttribute
	)
	if len(pauo.hooks) == 0 {
		node, err = pauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PetAttributeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pauo.mutation = mutation
			node, err = pauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pauo.hooks) - 1; i >= 0; i-- {
			mut = pauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PetAttributeUpdateOne) SaveX(ctx context.Context) *PetAttribute {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PetAttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PetAttributeUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pauo *PetAttributeUpdateOne) sqlSave(ctx context.Context) (_node *PetAttribute, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   petattribute.Table,
			Columns: petattribute.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: petattribute.FieldID,
			},
		},
	}
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PetAttribute.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := pauo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: petattribute.FieldName,
		})
	}
	if value, ok := pauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: petattribute.FieldUpdatedAt,
		})
	}
	if value, ok := pauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: petattribute.FieldCreatedAt,
		})
	}
	if pauo.mutation.PetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petattribute.PetTable,
			Columns: []string{petattribute.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pauo.mutation.PetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petattribute.PetTable,
			Columns: []string{petattribute.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PetAttribute{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{petattribute.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
