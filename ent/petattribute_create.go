// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sample/ent/pet"
	"sample/ent/petattribute"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// PetAttributeCreate is the builder for creating a PetAttribute entity.
type PetAttributeCreate struct {
	config
	mutation *PetAttributeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pac *PetAttributeCreate) SetName(s string) *PetAttributeCreate {
	pac.mutation.SetName(s)
	return pac
}

// SetUpdatedAt sets the "updated_at" field.
func (pac *PetAttributeCreate) SetUpdatedAt(t time.Time) *PetAttributeCreate {
	pac.mutation.SetUpdatedAt(t)
	return pac
}

// SetCreatedAt sets the "created_at" field.
func (pac *PetAttributeCreate) SetCreatedAt(t time.Time) *PetAttributeCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pac *PetAttributeCreate) SetNillableCreatedAt(t *time.Time) *PetAttributeCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetPetID sets the "pet" edge to the Pet entity by ID.
func (pac *PetAttributeCreate) SetPetID(id int) *PetAttributeCreate {
	pac.mutation.SetPetID(id)
	return pac
}

// SetNillablePetID sets the "pet" edge to the Pet entity by ID if the given value is not nil.
func (pac *PetAttributeCreate) SetNillablePetID(id *int) *PetAttributeCreate {
	if id != nil {
		pac = pac.SetPetID(*id)
	}
	return pac
}

// SetPet sets the "pet" edge to the Pet entity.
func (pac *PetAttributeCreate) SetPet(p *Pet) *PetAttributeCreate {
	return pac.SetPetID(p.ID)
}

// Mutation returns the PetAttributeMutation object of the builder.
func (pac *PetAttributeCreate) Mutation() *PetAttributeMutation {
	return pac.mutation
}

// Save creates the PetAttribute in the database.
func (pac *PetAttributeCreate) Save(ctx context.Context) (*PetAttribute, error) {
	var (
		err  error
		node *PetAttribute
	)
	pac.defaults()
	if len(pac.hooks) == 0 {
		if err = pac.check(); err != nil {
			return nil, err
		}
		node, err = pac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PetAttributeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pac.check(); err != nil {
				return nil, err
			}
			pac.mutation = mutation
			node, err = pac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pac.hooks) - 1; i >= 0; i-- {
			mut = pac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PetAttributeCreate) SaveX(ctx context.Context) *PetAttribute {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (pac *PetAttributeCreate) defaults() {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		v := petattribute.DefaultCreatedAt()
		pac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PetAttributeCreate) check() error {
	if _, ok := pac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := pac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (pac *PetAttributeCreate) sqlSave(ctx context.Context) (*PetAttribute, error) {
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pac *PetAttributeCreate) createSpec() (*PetAttribute, *sqlgraph.CreateSpec) {
	var (
		_node = &PetAttribute{config: pac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: petattribute.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: petattribute.FieldID,
			},
		}
	)
	if value, ok := pac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: petattribute.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: petattribute.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: petattribute.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := pac.mutation.PetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   petattribute.PetTable,
			Columns: []string{petattribute.PetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PetAttributeCreateBulk is the builder for creating many PetAttribute entities in bulk.
type PetAttributeCreateBulk struct {
	config
	builders []*PetAttributeCreate
}

// Save creates the PetAttribute entities in the database.
func (pacb *PetAttributeCreateBulk) Save(ctx context.Context) ([]*PetAttribute, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PetAttribute, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PetAttributeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PetAttributeCreateBulk) SaveX(ctx context.Context) []*PetAttribute {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
